#include <iostream>
using namespace std;

struct BSTNode {
    int data;
    BSTNode* left;
    BSTNode* right;
};

BSTNode* GetNewNode(int data) {
    BSTNode* newNode = new BSTNode();
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

BSTNode* Insert(BSTNode* root, int data) {
    if(root == NULL) {
        root = GetNewNode(data);
    }
    else if(data <= root->data) {
        root->left = Insert(root->left, data);
    }
    else {
        root->right = Insert(root->right, data);
    }
    return root;
}

bool search(BSTNode* root, int data) {
    if(root == NULL) {
        return false;
    }
    else if(root->data == data) {  // Fixed condition (was `root->data < data`)
        return true;
    }
    else if(data <= root->data) {
        return search(root->left, data);  // Added semicolon
    }
    else {
        return search(root->right, data);  // Added semicolon
    }
}

int main() {
    BSTNode* root = NULL;  // Fixed `BstNode` to `BSTNode`
    root = Insert(root, 15);	
    root = Insert(root, 10);	 
    root = Insert(root, 20);
    root = Insert(root, 25);
    root = Insert(root, 8);
    root = Insert(root, 12);
   
    int number;
    cout << "Enter number to be searched: ";
    cin >> number;
    
    if(search(root, number) == true) {  // Fixed `Search` to `search`
        cout << "Found\n";  // Added semicolon
    }
    else {
        cout << "Not Found\n";  // Added semicolon
    }  
    return 0;
}
